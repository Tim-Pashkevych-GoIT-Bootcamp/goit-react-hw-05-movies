{"version":3,"file":"static/js/328.6f1a2421.chunk.js","mappings":"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","sources":["hooks/useHttp.js","pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useHttp = ({ fn, recordId, query }) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fn({ recordId, query })\n      .then(res => setData(res))\n      .catch(error => {\n        setError(error.message);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [fn, recordId, query]);\n\n  return { data, setData, isLoading, error };\n};\n","import styled from 'styled-components';\n\nexport const StyledCastList = styled.ul`\n  display: flex;\n  gap: 30px 10px;\n  flex-wrap: wrap;\n\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  li {\n    width: calc((100% - 60px) / 4);\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n\n    img {\n      margin-bottom: 10px;\n    }\n\n    p {\n      text-align: center;\n      padding: 0;\n      margin: 0;\n    }\n  }\n`;\n","import { MOVIE_DB_IMAGE_URL } from 'helpers/constants';\nimport { useHttp } from 'hooks/useHttp';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { fetchMovieCasts } from 'services/api';\nimport { FaUserAlt } from 'react-icons/fa';\nimport { Loader } from 'components';\nimport { StyledCastList } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const params = { fn: fetchMovieCasts, recordId: movieId };\n  const { data, isLoading, error } = useHttp(params);\n\n  if (error) {\n    toast.error(error);\n  }\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <StyledCastList>\n        {data &&\n          data.map(cast => (\n            <li key={cast.cast_id}>\n              {cast.profile_path ? (\n                <img\n                  src={`${MOVIE_DB_IMAGE_URL}${cast.profile_path}`}\n                  alt={cast.name}\n                  width={100}\n                />\n              ) : (\n                <FaUserAlt size={100} />\n              )}\n              <div>\n                <p>{cast.original_name}</p>\n                <p>\n                  <b>Character:</b>\n                </p>\n                <p> {cast.character}</p>\n              </div>\n            </li>\n          ))}\n      </StyledCastList>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { MOVIE_DB_API_BASE_URL } from 'helpers/constants';\n\nconst moviedbApi = axios.create({\n  baseURL: MOVIE_DB_API_BASE_URL,\n  headers: {\n    Authorization: `Bearer ${process.env.REACT_APP_THEMOVIEDB_TOKEN}`,\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await moviedbApi.get('trending/movie/day');\n\n  return data.results;\n};\n\nexport const fetchMovieDetails = async ({ recordId }) => {\n  const { data } = await moviedbApi.get(`movie/${recordId}`);\n\n  return data;\n};\n\nexport const fetchMovieCasts = async ({ recordId }) => {\n  const { data } = await moviedbApi.get(`movie/${recordId}/credits`);\n\n  return data.cast;\n};\n\nexport const fetchMovieReviews = async ({ recordId }) => {\n  const { data } = await moviedbApi.get(`movie/${recordId}/reviews`);\n\n  return data.results;\n};\n\nexport const findMovies = async ({ query }) => {\n  if (!query) {\n    return [];\n  }\n\n  const { data } = await moviedbApi.get('search/movie', {\n    params: { query },\n  });\n\n  return data.results;\n};\n"],"names":["useHttp","_ref","fn","recordId","query","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","useEffect","then","res","catch","message","finally","StyledCastList","styled","_templateObject","_taggedTemplateLiteral","movieId","useParams","params","fetchMovieCasts","_useHttp","toast","_jsxs","_Fragment","children","_jsx","Loader","map","cast","profile_path","src","concat","MOVIE_DB_IMAGE_URL","alt","name","width","FaUserAlt","size","original_name","character","cast_id","moviedbApi","axios","baseURL","MOVIE_DB_API_BASE_URL","headers","Authorization","process","fetchTrendingMovies","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$moviedbApi$get","_context","prev","next","get","sent","abrupt","results","stop","apply","arguments","fetchMovieDetails","_ref3","_callee2","_ref2","_yield$moviedbApi$get2","_context2","_x","_ref5","_callee3","_ref4","_yield$moviedbApi$get3","_context3","_x2","fetchMovieReviews","_ref7","_callee4","_ref6","_yield$moviedbApi$get4","_context4","_x3","findMovies","_ref9","_callee5","_ref8","_yield$moviedbApi$get5","_context5","_x4"],"sourceRoot":""}